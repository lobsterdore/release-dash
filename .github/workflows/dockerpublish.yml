---

name: Docker

on:
  push:
    branches:
      - main

env:
  APP_NAME: release-dash
  DOCKER_BUILD_TARGET: run
  DOCKER_DH_PASSWORD: "${{ secrets.DOCKER_DH_PASSWORD }}"
  DOCKER_DH_REPO_URL: docker.io
  DOCKER_DH_REPOSITORY: lobsterdore
  DOCKER_DH_USER: lobsterdore
  DOCKER_GH_PASSWORD: "${{ secrets.DOCKER_GH_PASSWORD }}"
  DOCKER_GH_REPO_URL: docker.pkg.github.com
  DOCKER_GH_REPOSITORY: lobsterdore/release-dash
  DOCKER_GH_USER: "${{ github.actor }}"

jobs:

  push:
    runs-on: ubuntu-20.04

    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15.x

      - name: Checkout out repo
        uses: actions/checkout@v2
        with:
          path: release-dash

      - name: Run tests
        run: |
          cd $GITHUB_WORKSPACE/$APP_NAME
          make test_all

      - name: Build binaries
        run: |
          cd $GITHUB_WORKSPACE/$APP_NAME
          make build_all
          mkdir -p $GITHUB_WORKSPACE/releases
          tar cvfz $GITHUB_WORKSPACE/releases/release-dash-darwin-amd64.tar.tz -C $(go env GOPATH)/bin/darwin_amd64 release-dash
          tar cvfz $GITHUB_WORKSPACE/releases/release-dash-linux-386.tar.tz -C $(go env GOPATH)/bin/linux_386 release-dash
          tar cvfz $GITHUB_WORKSPACE/releases/release-dash-linux-arm.tar.tz -C $(go env GOPATH)/bin/linux_arm release-dash
          tar cvfz $GITHUB_WORKSPACE/releases/release-dash-linux-arm64.tar.tz -C $(go env GOPATH)/bin/linux_arm64 release-dash
          tar cvfz $GITHUB_WORKSPACE/releases/release-dash-linux-amd64.tar.tz -C $(go env GOPATH)/bin release-dash
          zip -jvr $GITHUB_WORKSPACE/releases/release-dash-windows-386.zip $(go env GOPATH)/bin/windows_386/release-dash.exe
          zip -jvr $GITHUB_WORKSPACE/releases/release-dash-windows-amd64.zip $(go env GOPATH)/bin/windows_amd64/release-dash.exe

      - name: Build image
        run: |
          cd $GITHUB_WORKSPACE/$APP_NAME
          make docker_build

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.33.0
        id: tag_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: main
          SOURCE: release-dash
          WITH_V: true

      - name: Log into GH Packages registry
        run: docker login $DOCKER_GH_REPO_URL -u $DOCKER_GH_USER --password $DOCKER_GH_PASSWORD

      - name: Push image to GH Packages
        run: |
          IMAGE_ID=$DOCKER_GH_REPO_URL/$DOCKER_GH_REPOSITORY/$APP_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip "v" prefix from tag name
          VERSION=$(echo ${{ steps.tag_release.outputs.new_tag }} | sed -e 's/^v//')

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $APP_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: Log into Dockerhub registry
        run: docker login $DOCKER_DH_REPO_URL -u $DOCKER_DH_USER --password $DOCKER_DH_PASSWORD

      - name: Push image to Dockerhub
        run: |
          IMAGE_ID=$DOCKER_DH_REPO_URL/$DOCKER_DH_REPOSITORY/$APP_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip "v" prefix from tag name
          VERSION=$(echo ${{ steps.tag_release.outputs.new_tag }} | sed -e 's/^v//')

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $APP_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: Release ${{ steps.tag_release.outputs.new_tag }}
          tag_name: ${{ steps.tag_release.outputs.new_tag }}

      - name: Upload MacOS x86 64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/gzip
          asset_name: release-dash-darwin-amd64-${{ steps.tag_release.outputs.new_tag }}.tar.tz
          asset_path: ${{ github.workspace }}/releases/release-dash-darwin-amd64.tar.tz
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Upload Linux x86 32 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/gzip
          asset_name: release-dash-linux-386-${{ steps.tag_release.outputs.new_tag }}.tar.tz
          asset_path: ${{ github.workspace }}/releases/release-dash-linux-386.tar.tz
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Upload Linux ARM Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/gzip
          asset_name: release-dash-linux-arm-${{ steps.tag_release.outputs.new_tag }}.tar.tz
          asset_path: ${{ github.workspace }}/releases/release-dash-linux-arm.tar.tz
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Upload Linux ARM 64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/gzip
          asset_name: release-dash-linux-arm64-${{ steps.tag_release.outputs.new_tag }}.tar.tz
          asset_path: ${{ github.workspace }}/releases/release-dash-linux-arm64.tar.tz
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Upload Linux x86 64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/gzip
          asset_name: release-dash-linux-amd64-${{ steps.tag_release.outputs.new_tag }}.tar.tz
          asset_path: ${{ github.workspace }}/releases/release-dash-linux-amd64.tar.tz
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Upload Windows x86 32 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/zip
          asset_name: release-dash-windows-386-${{ steps.tag_release.outputs.new_tag }}.tar.tz
          asset_path: ${{ github.workspace }}/releases/release-dash-windows-386.tar.tz
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Upload Windows x86 64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/zip
          asset_name: release-dash-windows-amd64-${{ steps.tag_release.outputs.new_tag }}.tar.tz
          asset_path: ${{ github.workspace }}/releases/release-dash-windows-amd64.tar.tz
          upload_url: ${{ steps.create_release.outputs.upload_url }}
